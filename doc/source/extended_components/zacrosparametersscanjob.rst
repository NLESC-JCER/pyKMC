.. _zacrosparametersscanjob:

ZacrosParametersScanJob
-----------------------

.. currentmodule:: scm.pyzacros.core.ZacrosParametersScanJob

``ZacrosParametersScanJob`` class represents a job that is a container for other jobs, called children jobs, which must be :ref:`ZacrosJobs <zacrosjob>` or :ref:`ZacrosSteadyStateJob <zacrossteadystatejob>` kind objects. This class is an extension of the PLAMS MultiJob class. So it inherits all its powerful features, e.g., being executed locally or submitted to some external queueing system transparently or executing jobs in parallel with a predefined dependency structure. See all configure possibilities on the PLAMS MultiJob class documentation in this link: `PLAMS.MultiJob <../../plams/components/jobs.html#multijobs>`_.

The ``ZacrosParametersScanJob`` class constructor doesn't require a Settings object; instead, it requires a reference job ``reference`` from which the calculation ``Settings`` is taken to be replicated through its children. Children are initially copies of the reference job. However, just before they are run, their corresponding Settings are altered accordingly to the rules defined through a ``Parameters`` object provided in the constructor. The following lines illustrates how to use this class:

.. code-block:: python
  :linenos:

  ps_parameters = pz.ZacrosParametersScanJob.Parameters()
  ps_parameters.add( 'x_CO', 'molar_fraction.CO', numpy.arange(0.1, 1.0, 0.1) )
  ps_parameters.add( 'x_O2', 'molar_fraction.O2', lambda params: 1.0-params['x_CO'] )
  ps_parameters.set_generator( pz.ZacrosParametersScanJob.zipGenerator )
  print(ps_parameters)

  ps_job = pz.ZacrosParametersScanJob( reference=z_job, parameters=ps_parameters )
  results = ps_job.run()

How to create the ``Parameters`` object is demonstrated in lines 1-4.
The object is initially formed by invoking its constructor (line 1).
Then, we created an independent variable called ``x_CO`` ranging from 0.1 to 0.9 in steps of 0.1, which will be substituted for ``molar_fraction.CO`` in the Zacros input files (line 2). Then, we created a dependent variable called ``x_O2`` that accepts the value ``1-x_CO`` and will be replaced by ``molar_fraction.O2`` in the Zacros input files. Keep in mind that this enforces the rule ``x_CO+x_O2=1``. The 'zipGenerator' function from 'ZacrosParametersScanJob' is then used as a generator.
The independent variables are combined using the zipGenerator function. However, since there is only one independent parameter involved, this line can be skipped. It is only included here to show how to call the generator. See the API documentation for more details. Line 5, print the final values of the parameters.
Finally, lines 7 and 8 create the ``ZacrosParametersScanJob`` object by calling its constructor and use its the method ``run()`` to execute it.

The execution of the code above generates the following output:

.. code-block:: none

  1: {'x_CO': 0.1, 'x_O2': 0.9}
  2: {'x_CO': 0.2, 'x_O2': 0.8}
  3: {'x_CO': 0.3, 'x_O2': 0.7}
  4: {'x_CO': 0.4, 'x_O2': 0.6}
  5: {'x_CO': 0.5, 'x_O2': 0.5}
  6: {'x_CO': 0.6, 'x_O2': 0.4}
  7: {'x_CO': 0.7, 'x_O2': 0.3}
  8: {'x_CO': 0.8, 'x_O2': 0.2}
  9: {'x_CO': 0.9, 'x_O2': 0.1}

  [22.09|16:19:58] JOB plamsjob STARTED
  [22.09|16:19:58] JOB plamsjob RUNNING
  [22.09|16:19:58] JOB plamsjob/plamsjob_ps_cond000 STARTED
  [22.09|16:19:58] JOB plamsjob/plamsjob_ps_cond000 RUNNING
  [22.09|16:23:33] JOB plamsjob/plamsjob_ps_cond000 FINISHED
  [22.09|16:23:33] JOB plamsjob/plamsjob_ps_cond000 SUCCESSFUL
  [22.09|16:23:33] JOB plamsjob/plamsjob_ps_cond001 STARTED
  [22.09|16:23:33] JOB plamsjob/plamsjob_ps_cond001 RUNNING
  [22.09|16:27:16] JOB plamsjob/plamsjob_ps_cond001 FINISHED
  [22.09|16:27:17] JOB plamsjob/plamsjob_ps_cond001 SUCCESSFUL
  ...
  [22.09|16:47:18] JOB plamsjob/plamsjob_ps_cond008 STARTED
  [22.09|16:47:18] JOB plamsjob/plamsjob_ps_cond008 RUNNING
  [22.09|16:52:37] JOB plamsjob/plamsjob_ps_cond008 FINISHED
  [22.09|16:52:37] JOB plamsjob/plamsjob_ps_cond008 SUCCESSFUL
  [22.09|16:52:37] JOB plamsjob FINISHED
  [22.09|16:52:37] JOB plamsjob SUCCESSFUL

When running the ``ZacrosParametersScanJob`` calculation (see :meth:`~ZacrosParametersScanJob.run` method), all necessary input files for zacros are generated in the job directory (see option ``name`` in the constructor), and Zacros is internally executed. Then, all output files generated by Zacros are stored for future reference in the same directory. The information in the output directories can be easily accessed using the class ``ZacrosParametersScanResults``.

In this example, all conditions or molar fractions of ``CO`` are executed sequentially, but it is possible
to execute in parallel using a different JobRunner. Each condition is executed in a new job directory,
``plamsjob/plamsjob_ps_cond000``, ``plamsjob/plamsjob_ps_cond001``, etc., where all output files are generated
and stored for future reference. The ``plams_job`` prefix can be replaced by using the option ``name`` in the
constructor. Notice the status of each job follows the sequence ``STARTED-->RUNNING-->FINISHED-->SUCCESSFUL``.

API
~~~

.. autoclass:: ZacrosParametersScanJob
    :exclude-members: _result_type, __init__, Parameter, Parameters

.. autoclass:: scm.pyzacros::ZacrosParametersScanJob.Parameter
    :exclude-members: __init__

.. autoclass:: scm.pyzacros::ZacrosParametersScanJob.Parameters
    :exclude-members: __init__
