Langmuir-Hinshelwood model: Acceleration by Automated Rescaling of the Rate Constants.
--------------------------------------------------------------------------------------

asdasd

.. code:: ipython3

    import multiprocessing
    import numpy
    
    import scm.plams
    import scm.pyzacros as pz
    import scm.pyzacros.models

.. code:: ipython3

    scm.pyzacros.init()


.. parsed-literal::

    PLAMS working folder: /home/user/pyzacros/examples/ZiffGulariBarshad/plams_workdir.006


.. code:: ipython3

    maxjobs = multiprocessing.cpu_count()
    scm.plams.config.default_jobrunner = scm.plams.JobRunner(parallel=True, maxjobs=maxjobs)
    scm.plams.config.job.runscript.nproc = 1
    print('Running up to {} jobs in parallel simultaneously'.format(maxjobs))


.. parsed-literal::

    Running up to 8 jobs in parallel simultaneously


.. code:: ipython3

    lh = pz.models.LangmuirHinshelwood()
    
    dt = 1.0e-5
    z_sett = pz.Settings()
    z_sett.random_seed = 1609
    z_sett.temperature = 500.0
    z_sett.pressure = 1.000
    z_sett.species_numbers = ('time', dt)
    z_sett.max_time = 100*dt
    
    z_job = pz.ZacrosJob( settings=z_sett, lattice=lh.lattice,
                          mechanism=lh.mechanism,
                          cluster_expansion=lh.cluster_expansion )

.. code:: ipython3

    ss_sett = pz.Settings()
    ss_sett.turnover_frequency.nbatch = 20
    #ss_sett.turnover_frequency.confidence = 0.98
    ss_sett.turnover_frequency.confidence = 0.5
    ss_sett.turnover_frequency.ignore_nbatch = 5
    ss_sett.nreplicas = 4
    ss_sett.scaling.enabled = 'T'
    ss_sett.scaling.partial_equilibrium_index_threshold = 0.1
    ss_sett.scaling.upper_bound = 100
    ss_sett.scaling.max_time = 10*dt
    
    ss_params = pz.ZacrosSteadyStateJob.Parameters()
    ss_params.add( 'max_time', 'restart.max_time',
                    2*z_sett.max_time*( numpy.arange(50)+1 )**2 )
    
    ss_job = pz.ZacrosSteadyStateJob( settings=ss_sett, reference=z_job,
                                      parameters=ss_params )


.. parsed-literal::

    [16.01|18:11:29] JOB plamsjob Steady State Convergence: Using nbatch=20,confidence=0.5,ignore_nbatch=5,nreplicas=4


.. code:: ipython3

    ps_params = pz.ZacrosParametersScanJob.Parameters()
    #ps_params.add( 'x_CO', 'molar_fraction.CO', numpy.linspace(0.0, 1.0, 21) )
    ps_params.add( 'x_CO', 'molar_fraction.CO', numpy.linspace(0.0, 1.0, 3) )
    ps_params.add( 'x_O2', 'molar_fraction.O2', lambda params: 1.0-params['x_CO'] )
    
    ps_job = pz.ZacrosParametersScanJob( reference=ss_job, parameters=ps_params )
    results = ps_job.run()
    
    if not ps_job.ok():
        print('Something went wrong!')


.. parsed-literal::

    [16.01|18:11:29] JOB plamsjob_ps_cond000 Steady State Convergence: Using nbatch=20,confidence=0.5,ignore_nbatch=5,nreplicas=4
    [16.01|18:11:29] JOB plamsjob_ps_cond001 Steady State Convergence: Using nbatch=20,confidence=0.5,ignore_nbatch=5,nreplicas=4
    [16.01|18:11:29] JOB plamsjob_ps_cond002 Steady State Convergence: Using nbatch=20,confidence=0.5,ignore_nbatch=5,nreplicas=4
    [16.01|18:11:29] JOB plamsjob STARTED
    [16.01|18:11:29] Waiting for job plamsjob to finish
    [16.01|18:11:29] JOB plamsjob RUNNING
    
    ...
    
    [16.01|18:12:02] JOB plamsjob/plamsjob_ps_cond000/plamsjob_ps_cond000_ss_iter004_rep000 SUCCESSFUL
    [16.01|18:12:02] JOB plamsjob/plamsjob_ps_cond000/plamsjob_ps_cond000_ss_iter004_rep002 SUCCESSFUL
    [16.01|18:12:02]    Replica #0
    [16.01|18:12:02]       species            TOF          error          ratio     conv?
    [16.01|18:12:02]            CO        0.00000        0.00000        0.00000      True
    [16.01|18:12:02]            O2        0.07447        0.49566        6.65631     False
    [16.01|18:12:02]           CO2        0.00000        0.00000        0.00000      True
    [16.01|18:12:03]    Replica #1
    [16.01|18:12:03]       species            TOF          error          ratio     conv?
    [16.01|18:12:03]            CO        0.00000        0.00000        0.00000      True
    [16.01|18:12:03]            O2       -0.67799        0.43939        0.64809     False
    [16.01|18:12:03]           CO2        0.00000        0.00000        0.00000      True
    [16.01|18:12:03]    Replica #2
    [16.01|18:12:03]       species            TOF          error          ratio     conv?
    [16.01|18:12:03]            CO        0.00000        0.00000        0.00000      True
    [16.01|18:12:03]            O2       -0.88059        0.46912        0.53274     False
    [16.01|18:12:03]           CO2        0.00000        0.00000        0.00000      True
    [16.01|18:12:04]    Replica #3
    [16.01|18:12:04]       species            TOF          error          ratio     conv?
    [16.01|18:12:04]            CO        0.00000        0.00000        0.00000      True
    [16.01|18:12:04]            O2       -1.89035        0.46856        0.24787      True
    [16.01|18:12:04]           CO2        0.00000        0.00000        0.00000      True
    [16.01|18:12:04]    Average
    [16.01|18:12:04]       species            TOF          error          ratio     conv?
    [16.01|18:12:04]            CO        0.00000        0.00000        0.00000      True
    [16.01|18:12:04]            O2       -0.84362        0.31919        0.37836      True
    [16.01|18:12:04]           CO2        0.00000        0.00000        0.00000      True
    [16.01|18:12:04] JOB plamsjob/plamsjob_ps_cond000 Steady State Convergence: CONVERGENCE REACHED. DONE!
    [16.01|18:12:04] JOB plamsjob/plamsjob_ps_cond000 FINISHED
    [16.01|18:12:06] JOB plamsjob/plamsjob_ps_cond000 SUCCESSFUL
    [16.01|18:12:09] JOB plamsjob FINISHED
    [16.01|18:12:10] JOB plamsjob SUCCESSFUL

.. code:: ipython3

    x_CO = []
    ac_O = []
    ac_CO = []
    TOF_CO2 = []
    
    results_dict = results.turnover_frequency()
    results_dict = results.average_coverage( last=10, update=results_dict )
    
    for i in range(len(results_dict)):
        x_CO.append( results_dict[i]['x_CO'] )
        ac_O.append( results_dict[i]['average_coverage']['O*'] )
        ac_CO.append( results_dict[i]['average_coverage']['CO*'] )
        TOF_CO2.append( results_dict[i]['turnover_frequency']['CO2'] )
    
    print( '------------------------------------------------' )
    print( '%4s'%'cond', '%8s'%'x_CO', '%10s'%'ac_O', '%10s'%'ac_CO', '%12s'%'TOF_CO2' )
    print( '------------------------------------------------' )
    for i in range(len(x_CO)):
        print( '%4d'%i, '%8.2f'%x_CO[i], '%10.6f'%ac_O[i], '%10.6f'%ac_CO[i], '%12.6f'%TOF_CO2[i] )


.. parsed-literal::

    ------------------------------------------------
    cond     x_CO       ac_O      ac_CO      TOF_CO2
    ------------------------------------------------
       0     0.00   0.678625   0.000000     0.000000
       1     0.50   0.444906   0.279719   330.208333
       2     1.00   0.000000   0.627156     0.000000


.. code:: ipython3

    scm.pyzacros.finish()


.. parsed-literal::

    [16.01|18:12:12] PLAMS run finished. Goodbye

